apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: apm-server
  name: apm-server
spec:
  ports:
  - name: "8200"
    port: 8200
    targetPort: 8200
  selector:
    io.kompose.service: apm-server
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
  - name: "9200"
    port: 9200
    targetPort: 9200
  selector:
    io.kompose.service: elasticsearch
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  ports:
  - name: "5601"
    port: 5601
    targetPort: 5601
  selector:
    io.kompose.service: kibana
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  ports:
  - name: "5000"
    port: 5000
    targetPort: 5000
  selector:
    io.kompose.service: logstash
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
  selector:
    io.kompose.service: mongodb
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  ports:
  - name: "3306"
    port: 3306
    targetPort: 3306
  selector:
    io.kompose.service: mysql
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: news-manager
  name: news-manager
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    io.kompose.service: news-manager
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: nlp-service
  name: nlp-service
spec:
  ports:
  - name: "8082"
    port: 8082
    targetPort: 8082
  selector:
    io.kompose.service: nlp-service
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: nlp-service-flower
  name: nlp-service-flower
spec:
  ports:
  - name: "5555"
    port: 5555
    targetPort: 5555
  selector:
    io.kompose.service: nlp-service-flower
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  ports:
  - name: "4369"
    port: 4369
    targetPort: 4369
  - name: "5671"
    port: 5671
    targetPort: 5671
  - name: "5672"
    port: 5672
    targetPort: 5672
  - name: "15671"
    port: 15671
    targetPort: 15671
  - name: "15672"
    port: 15672
    targetPort: 15672
  - name: "15674"
    port: 15674
    targetPort: 15674
  - name: "25672"
    port: 25672
    targetPort: 25672
  selector:
    io.kompose.service: rabbitmq
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: uaa
  name: uaa
spec:
  ports:
  - name: "8081"
    port: 8081
    targetPort: 8081
  selector:
    io.kompose.service: uaa
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: apm-server
  name: apm-server
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: apm-server
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: apm-server
    spec:
      containers:
      - env:
        - name: apm-server.host
          value: 0.0.0.0:8200
        - name: apm-server.secret_token
          value: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
        - name: logging.to_files
          value: "false"
        - name: output.elasticsearch.hosts
          value: http://elasticsearch:9200
        - name: setup.kibana.host
          value: kibana:5601
        - name: setup.template.enabled
          value: "true"
        image: store/elastic/apm-server:7.6.0
        imagePullPolicy: ""
        name: apm-server
        ports:
        - containerPort: 8200
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: elasticsearch
    spec:
      containers:
      - env:
        - name: ES_JAVA_OPTS
          value: -Xms512m -Xmx512m
        - name: JAVA_TOOL_OPTIONS
          value: -Xms512m -Xmx512m
        - name: discovery.type
          value: single-node
        image: elasticsearch:7.6.0
        imagePullPolicy: ""
        name: elasticsearch
        ports:
        - containerPort: 9200
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elastic-news-service-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: elastic-news-service-data
        persistentVolumeClaim:
          claimName: elastic-news-service-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: heartbeat
  name: heartbeat
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: heartbeat
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: heartbeat
    spec:
      containers:
      - image: djrevok/heartbeat-news-service:latest
        imagePullPolicy: ""
        name: heartbeat
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: kibana
    spec:
      containers:
      - env:
        - name: SERVER_BASEPATH
          value: /kibana
        image: kibana:7.6.0
        imagePullPolicy: ""
        name: kibana
        ports:
        - containerPort: 5601
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: logstash
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: logstash
    spec:
      containers:
      - image: djrevok/logstash-news-service:latest
        imagePullPolicy: ""
        name: logstash
        ports:
        - containerPort: 5000
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: mongodb
    spec:
      containers:
      - image: djrevok/mongo-first-news-service:latest
        imagePullPolicy: ""
        name: mongodb
        ports:
        - containerPort: 27017
        resources: {}
        volumeMounts:
        - mountPath: /data/db
          name: mongodb-news-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: mongodb-news-data
        persistentVolumeClaim:
          claimName: mongodb-news-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: mysql
    spec:
      containers:
      - args:
        - --default-authentication-plugin=mysql_native_password
        env:
        - name: MYSQL_DATABASE
          value: newsservice
        - name: MYSQL_PASSWORD
          value: n3wsp4ssw0rd
        - name: MYSQL_ROOT_PASSWORD
          value: n3wss3rv1c3
        - name: MYSQL_USER
          value: app-us3r
        image: mysql:latest
        imagePullPolicy: ""
        name: mysql
        ports:
        - containerPort: 3306
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-uaa-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: mysql-uaa-data
        persistentVolumeClaim:
          claimName: mysql-uaa-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: news-manager
  name: news-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: news-manager
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: news-manager
    spec:
      containers:
      - env:
        - name: JWT_SECRET
          value: t0k3ns3cr3t
        - name: SERVER_BASEPATH
          value: /manager
        image: djrevok/news-manager:latest
        imagePullPolicy: ""
        name: news-manager
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: nlp-celery-worker
  name: nlp-celery-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nlp-celery-worker
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: nlp-celery-worker
    spec:
      containers:
      - env:
        - name: CELERY_FORCE_ROOT
          value: "True"
        - name: JWT_SECRET
          value: t0k3ns3cr3t
        image: djrevok/nlp-celery-worker:latest
        imagePullPolicy: ""
        name: nlp-celery-worker
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: nlp-service
  name: nlp-service
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nlp-service
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: nlp-service
    spec:
      containers:
      - env:
        - name: JWT_SECRET
          value: t0k3ns3cr3t
        - name: SERVER_BASEPATH
          value: /nlp
        image: djrevok/nlp-service:latest
        imagePullPolicy: ""
        name: nlp-service
        ports:
        - containerPort: 8082
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: nlp-service-flower
  name: nlp-service-flower
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: nlp-service-flower
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: nlp-service-flower
    spec:
      containers:
      - env:
        - name: RABBIT_URL_PREFIX
          value: rabbit
        - name: URL_PREFIX
          value: flower
        image: djrevok/nlp-service-flower:latest
        imagePullPolicy: ""
        name: nlp-service-flower
        ports:
        - containerPort: 5555
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: rabbitmq
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: rabbitmq
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: rabbitmq
    spec:
      containers:
      - env:
        - name: RABBITMQ_DEFAULT_PASS
          value: guest
        - name: RABBITMQ_DEFAULT_USER
          value: guest
        - name: RABBITMQ_DEFAULT_VHOST
          value: /
        - name: RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS
          value: -rabbitmq_management path_prefix "/rabbit"
        image: rabbitmq:management
        imagePullPolicy: ""
        name: rabbitmq
        ports:
        - containerPort: 4369
        - containerPort: 5671
        - containerPort: 5672
        - containerPort: 15671
        - containerPort: 15672
        - containerPort: 15674
        - containerPort: 25672
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: uaa
  name: uaa
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: uaa
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ./docker/docker-compose.yml -o kubernetess/resources
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: uaa
    spec:
      containers:
      - env:
        - name: JWT_SECRET
          value: t0k3ns3cr3t
        - name: SERVER_BASEPATH
          value: /uaa
        image: djrevok/uaa:latest
        imagePullPolicy: ""
        name: uaa
        ports:
        - containerPort: 8081
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /$1
  name: news-service-fanout
spec:
  rules:
    - http:
        paths:
        - path: /manager/?(.*)
          backend:
            serviceName: news-manager
            servicePort: 8080
        - path: /uaa/?(.*)
          backend:
            serviceName: uaa
            servicePort: 8081
        - path: /nlp/?(.*)
          backend:
            serviceName: nlp-service
            servicePort: 8082
        - path: /kibana/?(.*)
          backend:
            serviceName: kibana
            servicePort: 5601
        - path: /flower/?(.*)
          backend:
            serviceName: nlp-service-flower
            servicePort: 5555
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: news-service-rabbit
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /rabbit/$1
spec:
  rules:
    - http:
        paths:
        - path: /rabbit/?(.*)
          backend:
            serviceName: rabbitmq
            servicePort: 15672
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: elastic-news-service-data
  name: elastic-news-service-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-news-data
  name: mongodb-news-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql-uaa-data
  name: mysql-uaa-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
