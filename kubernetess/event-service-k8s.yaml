apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: apm-server
  name: apm-server
spec:
  ports:
  - name: "8200"
    port: 8200
    targetPort: 8200
  selector:
    io.kompose.service: apm-server
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  ports:
  - name: "9200"
    port: 9200
    targetPort: 9200
  selector:
    io.kompose.service: elasticsearch
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: event-manager
  name: event-manager
spec:
  ports:
  - name: "8080"
    port: 8080
    targetPort: 8080
  selector:
    io.kompose.service: event-manager
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  ports:
  - name: "5601"
    port: 5601
    targetPort: 5601
  selector:
    io.kompose.service: kibana
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  ports:
  - name: "5000"
    port: 5000
    targetPort: 5000
  selector:
    io.kompose.service: logstash
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  ports:
  - name: "27017"
    port: 27017
    targetPort: 27017
  selector:
    io.kompose.service: mongodb
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  ports:
  - name: "3306"
    port: 3306
    targetPort: 3306
  selector:
    io.kompose.service: mysql
status:
  loadBalancer: {}
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: uaa
  name: uaa
spec:
  ports:
  - name: "8081"
    port: 8081
    targetPort: 8081
  selector:
    io.kompose.service: uaa
status:
  loadBalancer: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: apm-server
  name: apm-server
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: apm-server
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: apm-server
    spec:
      containers:
      - env:
        - name: apm-server.host
          value: 0.0.0.0:8200
        - name: apm-server.secret_token
          value: xxVpmQB2HMzCL9PgBHVrnxjNXXw5J7bd79DFm6sjBJR5HPXDhcF8MSb3vv4bpg44
        - name: logging.to_files
          value: "false"
        - name: output.elasticsearch.hosts
          value: http://elasticsearch:9200
        - name: setup.kibana.host
          value: kibana:5601
        - name: setup.template.enabled
          value: "true"
        image: store/elastic/apm-server:7.6.0
        imagePullPolicy: ""
        name: apm-server
        ports:
        - containerPort: 8200
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: elasticsearch
  name: elasticsearch
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: elasticsearch
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: elasticsearch
    spec:
      containers:
      - env:
        - name: ES_JAVA_OPTS
          value: -Xms512m -Xmx512m
        - name: JAVA_TOOL_OPTIONS
          value: -Xms512m -Xmx512m
        - name: discovery.type
          value: single-node
        image: elasticsearch:7.6.0
        imagePullPolicy: ""
        name: elasticsearch
        ports:
        - containerPort: 9200
        resources: {}
        volumeMounts:
        - mountPath: /usr/share/elasticsearch/data
          name: elastic-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: elastic-data
        persistentVolumeClaim:
          claimName: elastic-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: event-manager
  name: event-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: event-manager
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: event-manager
    spec:
      containers:
      - env:
        - name: SERVER_BASEPATH
          value: /manager
        image: djrevok/event-manager:latest
        imagePullPolicy: IfNotPresent
        name: event-manager
        ports:
        - containerPort: 8080
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: heartbeat
  name: heartbeat
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: heartbeat
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: heartbeat
    spec:
      containers:
      - image: djrevok/heartbeat-event-service:latest
        imagePullPolicy: IfNotPresent
        name: heartbeat
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: kibana
  name: kibana
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: kibana
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: kibana
    spec:
      containers:
      - env:
        - name: SERVER_BASEPATH
          value: /kibana
        image: kibana:7.6.0
        imagePullPolicy: ""
        name: kibana
        ports:
        - containerPort: 5601
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: logstash
  name: logstash
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: logstash
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: logstash
    spec:
      containers:
      - image: djrevok/logstash-event-service:latest
        imagePullPolicy: IfNotPresent
        name: logstash
        ports:
        - containerPort: 5000
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb
  name: mongodb
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mongodb
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: mongodb
    spec:
      containers:
      - image: djrevok/mongo-event-service:latest
        imagePullPolicy: IfNotPresent
        name: mongodb
        ports:
        - containerPort: 27017
        resources: {}
        volumeMounts:
        - mountPath: /data/db
          name: mongodb-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: mongodb-data
        persistentVolumeClaim:
          claimName: mongodb-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: mysql
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: mysql
  strategy:
    type: Recreate
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: mysql
    spec:
      containers:
      - args:
        - --default-authentication-plugin=mysql_native_password
        env:
        - name: MYSQL_DATABASE
          value: eventservice
        - name: MYSQL_PASSWORD
          value: ev3ntp4ssw0r0
        - name: MYSQL_ROOT_PASSWORD
          value: ev3nts3rv1ce
        - name: MYSQL_USER
          value: app-us3r
        image: mysql:latest
        imagePullPolicy: ""
        name: mysql
        ports:
        - containerPort: 3306
        resources: {}
        volumeMounts:
        - mountPath: /var/lib/mysql
          name: mysql-data
      restartPolicy: Always
      serviceAccountName: ""
      volumes:
      - name: mysql-data
        persistentVolumeClaim:
          claimName: mysql-data
status: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: kompose convert -f ../docker/docker-compose.yml
    kompose.version: 1.21.0 ()
  creationTimestamp: null
  labels:
    io.kompose.service: uaa
  name: uaa
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: uaa
  strategy: {}
  template:
    metadata:
      annotations:
        kompose.cmd: kompose convert -f ../docker/docker-compose.yml
        kompose.version: 1.21.0 ()
      creationTimestamp: null
      labels:
        io.kompose.service: uaa
    spec:
      containers:
      - env:
        - name: SERVER_BASEPATH
          value: /uaa
        image: djrevok/uaa:latest
        imagePullPolicy: IfNotPresent
        name: uaa
        ports:
        - containerPort: 8081
        resources: {}
      restartPolicy: Always
      serviceAccountName: ""
      volumes: null
status: {}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  name: event-service-fanout
spec:
  rules:
  - http:
      paths:
      - backend:
          serviceName: event-manager
          servicePort: 8080
        path: /manager
      - backend:
          serviceName: uaa
          servicePort: 8081
        path: /uaa
      - backend:
          serviceName: kibana
          servicePort: 5601
        path: /kibana
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: elastic-data
  name: elastic-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mongodb-data
  name: mongodb-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  creationTimestamp: null
  labels:
    io.kompose.service: mysql-data
  name: mysql-data
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
status: {}
